import pandas as pd
import os
import glob
from datetime import datetime
from docxtpl import DocxTemplate
from docx2pdf import convert
import jinja2
from concurrent.futures import ThreadPoolExecutor, as_completed

try:
    import yaml
    config_path = "config.yaml"
    if os.path.exists(config_path):
        with open(config_path, encoding="utf-8") as f:
            config = yaml.safe_load(f)
    else:
        config = None
except ImportError:
    config = None

def format_date(val):
    if pd.isnull(val):
        return '‚Äî'
    if isinstance(val, datetime):
        if val.time() == datetime.min.time():
            return val.strftime('%d.%m.%Y')
        elif val.second == 0:
            return val.strftime('%d.%m.%Y %H:%M')
        else:
            return val.strftime('%d.%m.%Y %H:%M:%S')
    return str(val)

def floatformat(val, precision=2):
    try:
        precision = int(precision)
        return f"{float(val):.{precision}f}".replace('.', ',')
    except Exception:
        return val

jinja_env = jinja2.Environment()
jinja_env.filters['floatformat'] = floatformat

# ==== 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å ====
if config:
    root_dir = config.get("data_folder", ".")
    main_name = config.get("main_file", "main.xlsx")
    template_path = config.get("template_path", "template.docx")
    output_dir = config.get("output_dir", "output_docs")
    save_format = config.get("save_format", "both").lower()
    common_column = config.get("common_column", "id")
    file_name_column = config.get("file_name_column", "id")
else:
    print("–ö–æ–Ω—Ñ—ñ–≥ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É:")
    root_dir = input("–í–∫–∞–∂—ñ—Ç—å –ø–∞–ø–∫—É –∑ —Ç–∞–±–ª–∏—Ü—è–º–∏ (–¥–µ main.xlsx): ").strip() or "."
    main_name = input("–í–∫–∞–∂—ñ—Ç—å —ñ–º'—è –æ—Å–Ω–æ–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ (main.xlsx): ").strip() or "main.xlsx"
    template_path = input("–í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ —à–∞–±–ª–æ–Ω—É Word (template.docx): ").strip() or "template.docx"
    output_dir = input("–ö—É–¥–∏ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ (output_docs): ").strip() or "output_docs"
    save_format = input("–§–æ—Ä–º–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (docx/pdf/both): ").strip().lower() or "docx"
    common_column = input("–ù–∞–∑–≤–∞ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–≤–ø—Ü—è (id): ").strip() or "id"
    file_name_column = input("–ù–∞–∑–≤–∞ —Å—Ç–æ–≤–ø—Ü—è –¥–ª—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É (id): ").strip() or "id"

save_docx = save_format in ("docx", "both")
save_pdf = save_format in ("pdf", "both")

os.makedirs(output_dir, exist_ok=True)
pdf_output_dir = os.path.join(output_dir, "pdfs")
if save_pdf:
    os.makedirs(pdf_output_dir, exist_ok=True)

main_path = os.path.join(root_dir, main_name)
if not os.path.exists(main_path):
    raise FileNotFoundError(f"–û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {main_path}")

main_df = pd.read_excel(main_path)
main_df.columns = main_df.columns.str.strip()

all_xlsx = glob.glob(os.path.join(root_dir, "*.xlsx"))
other_xlsx = [f for f in all_xlsx if os.path.abspath(f) != os.path.abspath(main_path)]

other_tables = {}
for fname in other_xlsx:
    name = os.path.splitext(os.path.basename(fname))[0].lower()
    df = pd.read_excel(fname)
    df.columns = df.columns.str.strip()
    other_tables[name] = df

def generate_docx(borrower):
    context = {}
    # –î–æ–¥–∞—î–º–æ –≤—Å—ñ –ø–æ–ª—è –∑ main_df
    for col in main_df.columns:
        val = borrower[col]
        context[f"{col}_credit"] = val if pd.notnull(val) else "‚Äî"

    for tablename, df in other_tables.items():
        if common_column not in df.columns:
            continue
        filtered = df[df[common_column] == borrower[common_column]]
        rows = []
        for _, row in filtered.iterrows():
            row_dict = {}
            for col in df.columns:
                val = row[col]
                if isinstance(val, datetime):
                    row_dict[col] = format_date(val)
                else:
                    row_dict[col] = val if pd.notnull(val) else "‚Äî"
            rows.append(row_dict)
        context[f"{tablename}_table"] = rows

    tpl = DocxTemplate(template_path)
    tpl.render(context, jinja_env)
    safe_name = str(borrower.get(file_name_column, borrower[common_column])).replace(" ", "_")
    docx_filename = os.path.join(output_dir, f"doc_{safe_name}.docx")
    tpl.save(docx_filename)
    return docx_filename

# === 5. –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è DOCX ===
created_docx_files = []
with ThreadPoolExecutor() as executor:
    futures = [executor.submit(generate_docx, borrower) for _, borrower in main_df.iterrows()]
    for i, future in enumerate(as_completed(futures), 1):
        fname = future.result()
        created_docx_files.append(fname)
        print(f"  [{i}/{len(futures)}] –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {os.path.basename(fname)}")

print(f"\n‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ {len(created_docx_files)} DOCX –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.")

# === 6. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ PDF ===
if save_pdf:
    print("\nüìÑ –ü–æ—á–∏–Ω–∞—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é DOCX –≤ PDF...")
    try:
        convert(output_dir, pdf_output_dir)
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —É –ø–∞–ø–∫—É: {pdf_output_dir}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–∞—Å–æ–≤—ñ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —É PDF: {e}")

print("\nüèÅ –†–æ–±–æ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
