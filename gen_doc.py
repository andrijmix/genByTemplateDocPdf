import pandas as pd
import os
from datetime import datetime
from docxtpl import DocxTemplate
from docx2pdf import convert
import yaml
import jinja2
import glob

def format_date(val):
    if pd.isnull(val):
        return '‚Äî'
    if isinstance(val, datetime):
        if val.time() == datetime.min.time():
            return val.strftime('%d.%m.%Y')
        elif val.second == 0:
            return val.strftime('%d.%m.%Y %H:%M')
        else:
            return val.strftime('%d.%m.%Y %H:%M:%S')
    return str(val)

def floatformat(val, precision=2):
    try:
        precision = int(precision)
        return f"{float(val):.{precision}f}".replace('.', ',')
    except Exception:
        return val

jinja_env = jinja2.Environment()
jinja_env.filters['floatformat'] = floatformat

# === 1. –ß–∏—Ç–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑ config.yaml ===
with open("config.yaml", encoding="utf-8") as f:
    config = yaml.safe_load(f)

credits_path = config.get("credits_path", "credits.xlsx")
common_column = config.get("common_column", "id")
template_path = config.get("template_path", "template.docx")
output_dir = config.get("output_dir", "output_docs")
save_format = config.get("save_format", "both").lower()
file_name_column = config.get("file_name_column", "id")

save_docx = save_format in ("docx", "both")
save_pdf = save_format in ("pdf", "both")

os.makedirs(output_dir, exist_ok=True)
pdf_output_dir = os.path.join(output_dir, "pdfs")
if save_pdf:
    os.makedirs(pdf_output_dir, exist_ok=True)

# === 2. –ß–∏—Ç–∞–Ω–Ω—è credits.xlsx ===
credits_df = pd.read_excel(credits_path)
credits_df.columns = credits_df.columns.str.strip()

root_dir = os.path.dirname(os.path.abspath(credits_path))
all_xlsx = glob.glob(os.path.join(root_dir, "*.xlsx"))
other_xlsx = [f for f in all_xlsx if os.path.abspath(f) != os.path.abspath(credits_path)]

# === 3. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ —Ç–∞–±–ª–∏—Ü—ñ (phones, payments, address...) ===
other_tables = {}
for fname in other_xlsx:
    name = os.path.splitext(os.path.basename(fname))[0].lower()
    df = pd.read_excel(fname)
    df.columns = df.columns.str.strip()
    other_tables[name] = df

# === 4. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è DOCX ===
created_docx_files = []

for idx, borrower in credits_df.iterrows():
    context = {}

    # –î–æ–¥–∞—î–º–æ –≤—Å—ñ –ø–æ–ª—è –∑ credits_df (–º–æ–∂–Ω–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —Ç—É—Ç —è–∫ —Ö–æ—á–µ—à)
    for col in credits_df.columns:
        val = borrower[col]
        context[f"{col}_credit"] = val if pd.notnull(val) else "‚Äî"

    # –î–ª—è –∫–æ–∂–Ω–æ—ó –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —Ç–∞–±–ª–∏—Ü—ñ —Ä–æ–±–∏–º–æ –ø—ñ–¥–±—ñ—Ä –ø–æ –∫–ª—é—á—É (–æ–¥–Ω–∞-many, –º–æ–∂–µ –±—É—Ç–∏ 0..N —Ä—è–¥–∫—ñ–≤!)
    for tablename, df in other_tables.items():
        if common_column not in df.columns:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ –±–µ–∑ —Å–ø—ñ–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞

        filtered = df[df[common_column] == borrower[common_column]]

        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω—É
        rows = []
        for _, row in filtered.iterrows():
            row_dict = {}
            for col in df.columns:
                val = row[col]
                # –ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: –¥–∞—Ç–∏ —ñ —á–∏—Å–ª–∞
                if isinstance(val, datetime):
                    row_dict[col] = format_date(val)
                else:
                    row_dict[col] = val if pd.notnull(val) else "‚Äî"
            rows.append(row_dict)
        context[f"{tablename}_table"] = rows

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É
    tpl = DocxTemplate(template_path)
    tpl.render(context, jinja_env)

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
    safe_name = str(borrower.get(file_name_column, borrower[common_column])).replace(" ", "_")
    docx_filename = os.path.join(output_dir, f"doc_{safe_name}.docx")

    tpl.save(docx_filename)
    created_docx_files.append(docx_filename)

print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ {len(created_docx_files)} DOCX –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.")

if save_pdf:
    print("\nüìÑ –ü–æ—á–∏–Ω–∞—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é DOCX –≤ PDF...")
    try:
        convert(output_dir, pdf_output_dir)
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —É –ø–∞–ø–∫—É: {pdf_output_dir}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–∞—Å–æ–≤—ñ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —É PDF: {e}")

print("\nüèÅ –†–æ–±–æ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
