# test_generator.py - –ü—Ä–æ—Å—Ç–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
import os
import tempfile
import zipfile
import xml.etree.ElementTree as ET
from pathlib import Path
import pandas as pd
from datetime import datetime


class DocumentTestRunner:
    """–ö–ª–∞—Å –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤"""

    def __init__(self, test_folder="test", log_callback=None):
        self.test_folder = Path(test_folder)
        self.log_callback = log_callback or print

    def log(self, message):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        self.log_callback(message)

    def run_tests(self):
        """–ó–∞–ø—É—Å–∫–∞—î —Ç–µ—Å—Ç: –≥–µ–Ω–µ—Ä—É—î –¥–æ–∫—É–º–µ–Ω—Ç —ñ –ø–æ—Ä—ñ–≤–Ω—é—î –∑ –µ—Ç–∞–ª–æ–Ω–æ–º"""
        self.log("üß™ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        if not self._check_test_files():
            return False

        # –°—Ç–≤–æ—Ä—é—î–º–æ main.xlsx —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        main_file = self.test_folder / "main.xlsx"
        if not main_file.exists():
            self._create_test_main_xlsx()

        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
        generated_file = self._generate_test_document()
        if not generated_file:
            return False

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É test –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        test_generated = self.test_folder / "generated_test.docx"
        import shutil
        shutil.copy(generated_file, test_generated)
        self.log(f"üíæ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {test_generated}")

        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –µ—Ç–∞–ª–æ–Ω–Ω–∏–º —Ñ–∞–π–ª–æ–º
        success = self._compare_documents(generated_file)

        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
        try:
            os.unlink(generated_file)
        except:
            pass

        if success:
            self.log("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏.")
        else:
            self.log("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª–∏ test/generated_test.docx —Ç–∞ test/reference.docx")

        return success

    def _check_test_files(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        required_files = [
            self.test_folder / "template.docx",
            self.test_folder / "reference.docx"
        ]

        for file_path in required_files:
            if not file_path.exists():
                self.log(f"‚ùå –¢–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
                return False

        self.log("‚úì –í—Å—ñ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return True

    def _create_test_main_xlsx(self):
        """–°—Ç–≤–æ—Ä—é—î —Ç–µ—Å—Ç–æ–≤–∏–π main.xlsx —Ñ–∞–π–ª –∑ –µ—Ç–∞–ª–æ–Ω–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏"""
        try:
            self.log("üìù –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π main.xlsx...")

            # –ï—Ç–∞–ª–æ–Ω–Ω—ñ –¥–∞–Ω—ñ –∑ reference.docx
            test_data = {
                '–ù–ê–ó–í–ê_–°–£–î–£': ["–°–≤—è—Ç–æ—à–∏–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω–Ω–∏–π —Å—É–¥ –º. –ö–∏—î–≤–∞"],
                '–Ñ–î–†–ü–û–£_–°–£–î–£': ["02896733"],
                '–Ü–ü–ù_–ë–û–†–ñ–ù–ò–ö–ê': ["3663108343"],
                '–î–ê–¢–ê_–ù–ê–†–û–î–ñ–ï–ù–ù–Ø_–ë–û–†–ñ–ù–ò–ö–ê': [datetime(2000, 4, 16)],
                '–î–ê–¢–ê_–ó–ê–†–ê–•–£–í–ê–ù–ù–Ø_–í–Ü–î': [datetime(2021, 12, 15, 14, 51)],
                '–°–£–ú–ê_–ó–ê–†–ê–•–£–í–ê–ù–ù–Ø': [16500.00],
                'id': [1]
            }

            df = pd.DataFrame(test_data)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Excel –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
            main_file = self.test_folder / "main.xlsx"
            with pd.ExcelWriter(main_file, engine='openpyxl') as writer:
                df.to_excel(writer, index=False, sheet_name='Sheet1')

                # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–ª—è
                workbook = writer.book
                worksheet = writer.sheets['Sheet1']

                # –Ñ–î–†–ü–û–£ —Ç–∞ –Ü–ü–ù —è–∫ —Ç–µ–∫—Å—Ç
                for row in range(2, len(df) + 2):
                    worksheet[f'B{row}'].number_format = '@'  # –Ñ–î–†–ü–û–£_–°–£–î–£
                    worksheet[f'C{row}'].number_format = '@'  # –Ü–ü–ù_–ë–û–†–ñ–ù–ò–ö–ê

            self.log("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ test/main.xlsx")

        except Exception as e:
            self.log(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è main.xlsx: {e}")

    def _generate_test_document(self):
        """–ì–µ–Ω–µ—Ä—É—î —Ç–µ—Å—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ª–æ–≥—ñ–∫—É –æ—Å–Ω–æ–≤–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏"""
        try:
            self.log("üìù –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É...")

            template_file = self.test_folder / "template.docx"
            main_file = self.test_folder / "main.xlsx"

            # –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ
            from generator import smart_read_excel
            df = smart_read_excel(str(main_file), self.log)

            if len(df) == 0:
                self.log("‚ùå –¢–µ—Å—Ç–æ–≤–∏–π Excel —Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π")
                return None

            # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫
            test_row = df.iloc[0].to_dict()

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ –æ—Å–Ω–æ–≤–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏
            from generator import process_single_document

            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
            other_tables = {}
            main_columns = df.columns.tolist()

            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ datetime –¥–ª—è —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            for key, val in test_row.items():
                if isinstance(val, (pd.Timestamp, datetime)):
                    test_row[key] = val.isoformat()
                elif pd.isna(val):
                    test_row[key] = None

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –ø–∞–ø–∫—É
            temp_dir = tempfile.mkdtemp()

            args = (
                (0, test_row),
                str(template_file),
                temp_dir,
                "id",
                "id",
                other_tables,
                main_columns
            )

            # –ì–µ–Ω–µ—Ä—É—î–º–æ
            result = process_single_document(args)

            if result["success"]:
                self.log("‚úì –¢–µ—Å—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ")
                return result["filename"]
            else:
                self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {result['error']}")
                return None

        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")
            import traceback
            self.log(f"–î–µ—Ç–∞–ª—ñ: {traceback.format_exc()}")
            return None

    def _compare_documents(self, generated_file):
        """–ü–æ—Ä—ñ–≤–Ω—é—î –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∑ –µ—Ç–∞–ª–æ–Ω–Ω–∏–º"""
        reference_file = self.test_folder / "reference.docx"

        self.log("üîç –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –µ—Ç–∞–ª–æ–Ω–Ω–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º...")

        try:
            # –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –æ–±–æ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
            generated_text = self._extract_text_from_docx(generated_file)
            reference_text = self._extract_text_from_docx(str(reference_file))

            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç–∏
            generated_normalized = self._normalize_text(generated_text)
            reference_normalized = self._normalize_text(reference_text)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—é—á–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ reference.docx
            key_elements = [
                "–°–≤—è—Ç–æ—à–∏–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω–Ω–∏–π —Å—É–¥ –º. –ö–∏—î–≤–∞",
                "02896733",
                "3663108343",
                "16.04.2000",
                "15.12.2021 14:51",
                "16 500,00"
            ]

            missing_elements = []
            for element in key_elements:
                if element not in generated_normalized:
                    missing_elements.append(element)

            if not missing_elements:
                self.log("‚úÖ –í—Å—ñ –∫–ª—é—á–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ!")
                self.log("üéØ –î–æ–∫—É–º–µ–Ω—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                return True
            else:
                self.log("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∫–ª—é—á–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏:")
                for element in missing_elements:
                    self.log(f"   ‚Ä¢ {element}")

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
                self._save_debug_texts(reference_normalized, generated_normalized)
                return False

        except Exception as e:
            self.log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {e}")
            return False

    def _save_debug_texts(self, reference, generated):
        """–ó–±–µ—Ä—ñ–≥–∞—î —Ç–µ–∫—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"""
        debug_folder = Path("debug")
        debug_folder.mkdir(exist_ok=True)

        try:
            with open(debug_folder / "reference_text.txt", "w", encoding="utf-8") as f:
                f.write(reference)
            with open(debug_folder / "generated_text.txt", "w", encoding="utf-8") as f:
                f.write(generated)
            self.log(f"üíæ –¢–µ–∫—Å—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–∞–ø–∫—É debug/ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
        except Exception as e:
            self.log(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ debug —Ñ–∞–π–ª–∏: {e}")

    def _extract_text_from_docx(self, file_path):
        """–í–∏—Ç—è–≥—É—î —Ç–µ–∫—Å—Ç –∑ DOCX —Ñ–∞–π–ª—É"""
        text_content = []

        with zipfile.ZipFile(file_path, 'r') as docx_zip:
            try:
                xml_content = docx_zip.read('word/document.xml')
                root = ET.fromstring(xml_content)

                # –ü–æ—à—É–∫ –≤—Å—ñ—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                for elem in root.iter():
                    if elem.tag.endswith('}t'):
                        if elem.text:
                            text_content.append(elem.text)

            except Exception as e:
                self.log(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è XML: {e}")
                return ""

        return ' '.join(text_content)

    def _normalize_text(self, text):
        """–ù–æ—Ä–º–∞–ª—ñ–∑—É—î —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"""
        if not text:
            return ""

        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
        normalized = ' '.join(text.split())

        # –ó–∞–º—ñ–Ω—è—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        normalized = normalized.replace('\u00a0', ' ')  # –ù–µ—Ä–æ–∑—Ä–∏–≤–Ω–∏–π –ø—Ä–æ–±—ñ–ª
        normalized = normalized.replace('\u2010', '-')  # –î–µ—Ñ—ñ—Å–∏
        normalized = normalized.replace('\u2011', '-')
        normalized = normalized.replace('\u2012', '-')
        normalized = normalized.replace('\u2013', '-')
        normalized = normalized.replace('\u2014', '-')

        return normalized.strip()


def run_integration_test(log_callback=None):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—É"""
    test_runner = DocumentTestRunner(log_callback=log_callback)
    return test_runner.run_tests()


if __name__ == "__main__":
    success = run_integration_test()
    if success:
        print("üéâ –¢–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print("üí• –¢–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ñ!")
        exit(1)