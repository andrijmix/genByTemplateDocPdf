import sys
import os
import threading
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout,
                             QWidget, QLabel, QLineEdit, QPushButton, QTextEdit,
                             QFileDialog, QGridLayout, QMessageBox, QProgressBar,
                             QGroupBox, QFrame, QCheckBox)
from PyQt5.QtCore import QThread, pyqtSignal, Qt
from PyQt5.QtGui import QFont, QIcon
from generator import generate_documents
from test_generator import run_integration_test


class LoggerThread(QThread):
    """–ü–æ—Ç—ñ–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è UI"""
    log_signal = pyqtSignal(str)

    def __init__(self):
        super().__init__()
        self.messages = []
        self.running = True

    def add_message(self, message):
        self.messages.append(message)
        self.log_signal.emit(message)

    def stop(self):
        self.running = False


class TestThread(QThread):
    """–ü–æ—Ç—ñ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤"""
    log_signal = pyqtSignal(str)
    test_finished_signal = pyqtSignal(bool)  # True —è–∫—â–æ —Ç–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤

    def __init__(self):
        super().__init__()

    def run(self):
        try:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
            success = run_integration_test(log_callback=self.log_message)
            self.test_finished_signal.emit(success)
        except Exception as e:
            self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {str(e)}")
            self.test_finished_signal.emit(False)

    def log_message(self, message):
        self.log_signal.emit(message)


class GeneratorThread(QThread):
    """–ü–æ—Ç—ñ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤"""
    log_signal = pyqtSignal(str)
    finished_signal = pyqtSignal()

    def __init__(self, root_dir, main_file, template_file, output_dir,
                 common_column, file_name_column, run_tests=True):
        super().__init__()
        self.root_dir = root_dir
        self.main_file = main_file
        self.template_file = template_file
        self.output_dir = output_dir
        self.common_column = common_column
        self.file_name_column = file_name_column
        self.run_tests = run_tests
        self.stop_flag = False

    def run(self):
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if self.run_tests:
                self.log_message("=" * 50)
                self.log_message("üß™ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–ù–ò–• –¢–ï–°–¢–Ü–í")
                self.log_message("=" * 50)

                test_success = run_integration_test(log_callback=self.log_message)

                if not test_success:
                    self.log_message("=" * 50)
                    self.log_message("‚ùå –¢–ï–°–¢–ò –ü–†–û–í–ê–õ–ï–ù–Ü! –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ó–£–ü–ò–ù–ï–ù–ê!")
                    self.log_message("=" * 50)
                    self.log_message("üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:")
                    self.log_message("   ‚Ä¢ –ü–∞–ø–∫—É test/ –∑ —Ñ–∞–π–ª–∞–º–∏:")
                    self.log_message("     - template.docx (—à–∞–±–ª–æ–Ω)")
                    self.log_message("     - reference.docx (–µ—Ç–∞–ª–æ–Ω)")
                    self.log_message("   ‚Ä¢ –ö–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —à–∞–±–ª–æ–Ω—É")
                    self.log_message("   ‚Ä¢ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ñ–∞–π–ª: test/generated_test.docx")
                    return
                else:
                    self.log_message("=" * 50)
                    self.log_message("‚úÖ –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò! –ü–û–ß–ê–¢–û–ö –ì–ï–ù–ï–†–ê–¶–Ü–á")
                    self.log_message("=" * 50)

            # –û—Å–Ω–æ–≤–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è
            generate_documents(
                root_dir=self.root_dir,
                main_path=self.main_file,
                template_path=self.template_file,
                output_dir=self.output_dir,
                common_column=self.common_column,
                file_name_column=self.file_name_column,
                log_callback=self.log_message,
                stop_flag=lambda: self.stop_flag
            )
        except Exception as e:
            self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        finally:
            self.finished_signal.emit()

    def log_message(self, message):
        self.log_signal.emit(message)

    def stop_generation(self):
        self.stop_flag = True


class ModernButton(QPushButton):
    """–ü—Ä–æ—Å—Ç–∞ —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞"""

    def __init__(self, text, parent=None):
        super().__init__(text, parent)
        self.setStyleSheet("""
            QPushButton {
                background-color: #0078d4;
                color: white;
                border: none;
                border-radius: 3px;
                padding: 6px 12px;
                font-size: 12px;
                min-height: 24px;
            }
            QPushButton:hover {
                background-color: #106ebe;
            }
            QPushButton:pressed {
                background-color: #005a9e;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)


class ModernLineEdit(QLineEdit):
    """–ü—Ä–æ—Å—Ç–µ –ø–æ–ª–µ –≤–≤–æ–¥—É"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setStyleSheet("""
            QLineEdit {
                border: 1px solid #cccccc;
                border-radius: 3px;
                padding: 6px 8px;
                font-size: 12px;
                background-color: white;
                min-height: 16px;
            }
            QLineEdit:focus {
                border: 2px solid #0078d4;
            }
            QLineEdit:hover {
                border: 1px solid #0078d4;
            }
        """)


class App(QMainWindow):
    def __init__(self):
        super().__init__()
        self.generator_thread = None
        self.test_thread = None
        self.logger_thread = LoggerThread()
        self.logger_thread.log_signal.connect(self.log_write)
        self.logger_thread.start()

        self.init_ui()
        self.apply_modern_style()

    def init_ui(self):
        # –û—Å–Ω–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ
        self.setWindowTitle("DOCX Generator v2.1 (–∑ —Å–∏—Å—Ç–µ–º–Ω–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏)")
        self.setGeometry(100, 100, 900, 850)
        self.setMinimumSize(550, 500)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –≤—ñ–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(15, 15, 15, 15)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("DOCX Generator v2.1")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 18px;
                font-weight: bold;
                color: #000000;
                margin-bottom: 20px;
            }
        """)
        title_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title_label)

        # –ì—Ä—É–ø–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        test_group = QGroupBox("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        test_group.setStyleSheet("""
            QGroupBox {
                font-size: 14px;
                font-weight: bold;
                color: #000000;
                border: 1px solid #cccccc;
                border-radius: 4px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                background-color: white;
            }
        """)
        test_layout = QHBoxLayout(test_group)

        self.run_tests_checkbox = QCheckBox("–ó–∞–ø—É—Å–∫–∞—Ç–∏ —Ç–µ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é")
        self.run_tests_checkbox.setChecked(True)
        self.run_tests_checkbox.setStyleSheet("""
            QCheckBox {
                font-size: 12px;
                color: #000000;
                spacing: 8px;
            }
            QCheckBox::indicator {
                width: 18px;
                height: 18px;
            }
            QCheckBox::indicator:unchecked {
                border: 2px solid #cccccc;
                border-radius: 3px;
                background-color: white;
            }
            QCheckBox::indicator:checked {
                border: 2px solid #0078d4;
                border-radius: 3px;
                background-color: #0078d4;
            }
        """)
        test_layout.addWidget(self.run_tests_checkbox)

        self.test_only_btn = ModernButton("–¢—ñ–ª—å–∫–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        self.test_only_btn.setStyleSheet(self.test_only_btn.styleSheet() + """
            QPushButton {
                background-color: #FF9800;
                min-height: 30px;
                min-width: 120px;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
        """)
        self.test_only_btn.clicked.connect(self.run_tests_only)
        test_layout.addWidget(self.test_only_btn)

        test_layout.addStretch()
        main_layout.addWidget(test_group)

        # –ì—Ä—É–ø–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ñ–∞–π–ª—ñ–≤
        files_group = QGroupBox("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤")
        files_group.setStyleSheet("""
            QGroupBox {
                font-size: 14px;
                font-weight: bold;
                color: #000000;
                border: 1px solid #cccccc;
                border-radius: 4px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                background-color: white;
            }
        """)
        files_layout = QGridLayout(files_group)
        files_layout.setSpacing(15)

        # –ü–æ–ª—è –≤–≤–æ–¥—É
        self.root_dir = ModernLineEdit()
        self.root_dir.setPlaceholderText("–ü–∞–ø–∫–∞ –∑ Excel —Ñ–∞–π–ª–∞–º–∏...")
        self.main_file = ModernLineEdit()
        self.main_file.setPlaceholderText("–û—Å–Ω–æ–≤–Ω–∏–π Excel —Ñ–∞–π–ª...")
        self.template_file = ModernLineEdit()
        self.template_file.setPlaceholderText("Word —à–∞–±–ª–æ–Ω...")
        self.output_dir = ModernLineEdit()
        self.output_dir.setText("output_docs")
        self.output_dir.setPlaceholderText("–ü–∞–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è...")

        # –ö–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—ñ–≤
        btn_root = ModernButton("–û–±—Ä–∞—Ç–∏")
        btn_root.clicked.connect(self.select_root_dir)

        btn_main = ModernButton("–û–±—Ä–∞—Ç–∏")
        btn_main.clicked.connect(self.select_main_file)

        btn_template = ModernButton("–û–±—Ä–∞—Ç–∏")
        btn_template.clicked.connect(self.select_template_file)

        btn_output = ModernButton("–û–±—Ä–∞—Ç–∏")
        btn_output.clicked.connect(self.select_output_dir)

        # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ —ñ –∫–Ω–æ–ø–æ–∫
        files_layout.addWidget(QLabel("–ü–∞–ø–∫–∞ –∑ —Ç–∞–±–ª–∏—Ü—è–º–∏:"), 0, 0)
        files_layout.addWidget(self.root_dir, 0, 1)
        files_layout.addWidget(btn_root, 0, 2)

        files_layout.addWidget(QLabel("–û—Å–Ω–æ–≤–Ω–∏–π Excel-—Ñ–∞–π–ª:"), 1, 0)
        files_layout.addWidget(self.main_file, 1, 1)
        files_layout.addWidget(btn_main, 1, 2)

        files_layout.addWidget(QLabel("–®–∞–±–ª–æ–Ω DOCX:"), 2, 0)
        files_layout.addWidget(self.template_file, 2, 1)
        files_layout.addWidget(btn_template, 2, 2)

        files_layout.addWidget(QLabel("–ü–∞–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:"), 3, 0)
        files_layout.addWidget(self.output_dir, 3, 1)
        files_layout.addWidget(btn_output, 3, 2)

        main_layout.addWidget(files_group)

        # –ì—Ä—É–ø–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å—Ç–æ–≤–ø—Ü—ñ–≤
        columns_group = QGroupBox("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤")
        columns_group.setStyleSheet(files_group.styleSheet())
        columns_layout = QGridLayout(columns_group)
        columns_layout.setSpacing(15)

        self.common_column = ModernLineEdit()
        self.common_column.setText("id")
        self.common_column.setPlaceholderText("–°–ø—ñ–ª—å–Ω–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å...")

        self.file_name_column = ModernLineEdit()
        self.file_name_column.setText("id")
        self.file_name_column.setPlaceholderText("–°—Ç–æ–≤–ø–µ—Ü—å –¥–ª—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É...")

        columns_layout.addWidget(QLabel("–°–ø—ñ–ª—å–Ω–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å:"), 0, 0)
        columns_layout.addWidget(self.common_column, 0, 1, 1, 2)

        columns_layout.addWidget(QLabel("–°—Ç–æ–≤–ø–µ—Ü—å –¥–ª—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É:"), 1, 0)
        columns_layout.addWidget(self.file_name_column, 1, 1, 1, 2)

        main_layout.addWidget(columns_group)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        control_layout = QHBoxLayout()
        control_layout.setSpacing(15)

        self.start_btn = ModernButton("–ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó")
        self.start_btn.setStyleSheet(self.start_btn.styleSheet() + """
            QPushButton {
                background-color: #4CAF50;
                font-size: 14px;
                font-weight: bold;
                min-height: 35px;
                min-width: 140px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed {
                background-color: #3d8b40;
            }
        """)
        self.start_btn.clicked.connect(self.generate)

        self.stop_btn = ModernButton("–ó—É–ø–∏–Ω–∏—Ç–∏")
        self.stop_btn.setStyleSheet(self.stop_btn.styleSheet() + """
            QPushButton {
                background-color: #f44336;
                min-height: 35px;
                min-width: 100px;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
            QPushButton:pressed {
                background-color: #c1171b;
            }
        """)
        self.stop_btn.clicked.connect(self.stop_generation)
        self.stop_btn.setEnabled(False)

        control_layout.addWidget(self.start_btn)
        control_layout.addWidget(self.stop_btn)
        control_layout.addStretch()

        main_layout.addLayout(control_layout)

        # –õ–æ–≥
        log_group = QGroupBox("–ñ—É—Ä–Ω–∞–ª –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
        log_group.setStyleSheet(files_group.styleSheet())
        log_layout = QVBoxLayout(log_group)

        self.log = QTextEdit()
        self.log.setStyleSheet("""
            QTextEdit {
                border: 1px solid #cccccc;
                border-radius: 4px;
                padding: 8px;
                font-family: 'Consolas', 'Courier New', monospace;
                font-size: 11px;
                background-color: #ffffff;
                color: #000000;
            }
        """)
        self.log.setReadOnly(True)
        self.log.setMinimumHeight(200)

        log_layout.addWidget(self.log)
        main_layout.addWidget(log_group)

        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä (–ø–æ–∫–∏ —â–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π)
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 1px solid #cccccc;
                border-radius: 4px;
                text-align: center;
                font-weight: bold;
                background-color: #f5f5f5;
            }
            QProgressBar::chunk {
                background-color: #0078d4;
                border-radius: 3px;
            }
        """)
        main_layout.addWidget(self.progress_bar)

    def apply_modern_style(self):
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î –ø—Ä–æ—Å—Ç–∏–π —á–∏—Å—Ç–∏–π —Å—Ç–∏–ª—å"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #ffffff;
                color: #000000;
            }
            QLabel {
                color: #000000;
                font-size: 12px;
                font-weight: normal;
            }
        """)

    def log_write(self, text):
        """–î–æ–¥–∞—î —Ç–µ–∫—Å—Ç –¥–æ –ª–æ–≥—É"""
        self.log.append(text)
        self.log.ensureCursorVisible()

    def select_root_dir(self):
        dirname = QFileDialog.getExistingDirectory(self, "–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –∑ Excel —Ñ–∞–π–ª–∞–º–∏")
        if dirname:
            self.root_dir.setText(dirname)

    def select_main_file(self):
        filename, _ = QFileDialog.getOpenFileName(
            self, "–û–±–µ—Ä—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω–∏–π Excel-—Ñ–∞–π–ª", "", "Excel files (*.xlsx)")
        if filename:
            self.main_file.setText(filename)
            self.root_dir.setText(os.path.dirname(filename))

    def select_template_file(self):
        filename, _ = QFileDialog.getOpenFileName(
            self, "–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω DOCX", "", "DOCX files (*.docx)")
        if filename:
            self.template_file.setText(filename)

    def select_output_dir(self):
        dirname = QFileDialog.getExistingDirectory(self, "–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è DOCX")
        if dirname:
            self.output_dir.setText(dirname)

    def run_tests_only(self):
        """–ó–∞–ø—É—Å–∫–∞—î —Ç—ñ–ª—å–∫–∏ —Ç–µ—Å—Ç–∏ –±–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó"""
        # –û—á–∏—â–∞—î–º–æ –ª–æ–≥
        self.log.clear()

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        self.test_thread = TestThread()
        self.test_thread.log_signal.connect(self.log_write)
        self.test_thread.test_finished_signal.connect(self.test_only_finished)

        # –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫–∏
        self.test_only_btn.setEnabled(False)
        self.start_btn.setEnabled(False)

        self.test_thread.start()

    def test_only_finished(self, success):
        """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        self.test_only_btn.setEnabled(True)
        self.start_btn.setEnabled(True)

        if success:
            QMessageBox.information(self, "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è",
                                    "‚úÖ –¢–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!\n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏.")
        else:
            QMessageBox.warning(self, "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è",
                                "‚ùå –¢–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ñ!\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")

    def generate(self):
        """–ó–∞–ø—É—Å–∫–∞—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
        if not all([self.root_dir.text(), self.main_file.text(),
                    self.template_file.text(), self.output_dir.text()]):
            QMessageBox.warning(self, "–£–≤–∞–≥–∞",
                                "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è!")
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
        if not os.path.exists(self.main_file.text()):
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞",
                                 "–û—Å–Ω–æ–≤–Ω–∏–π Excel —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return

        if not os.path.exists(self.template_file.text()):
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞",
                                 "–§–∞–π–ª —à–∞–±–ª–æ–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return

        # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        self.generator_thread = GeneratorThread(
            self.root_dir.text(),
            self.main_file.text(),
            self.template_file.text(),
            self.output_dir.text(),
            self.common_column.text() or "id",
            self.file_name_column.text() or "id",
            run_tests=self.run_tests_checkbox.isChecked()
        )

        self.generator_thread.log_signal.connect(self.log_write)
        self.generator_thread.finished_signal.connect(self.generation_finished)

        # –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç—É —Ç–∞ –∞–∫—Ç–∏–≤—É—î–º–æ —Å—Ç–æ–ø
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)

        # –û—á–∏—â–∞—î–º–æ –ª–æ–≥
        self.log.clear()

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç—ñ–∫
        self.generator_thread.start()

    def stop_generation(self):
        """–ó—É–ø–∏–Ω—è—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤"""
        if self.generator_thread:
            self.generator_thread.stop_generation()
            self.log_write("‚õî –ó–∞–ø–∏—Ç –Ω–∞ –∑—É–ø–∏–Ω–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ...")

    def generation_finished(self):
        """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó"""
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)

        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ",
                                "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞–ø–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.")

    def closeEvent(self, event):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        if self.generator_thread and self.generator_thread.isRunning():
            reply = QMessageBox.question(self, "–ó–∞–∫—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É",
                                         "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —â–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è. –ó—É–ø–∏–Ω–∏—Ç–∏ —Ç–∞ –∑–∞–∫—Ä–∏—Ç–∏?",
                                         QMessageBox.Yes | QMessageBox.No)
            if reply == QMessageBox.Yes:
                self.generator_thread.stop_generation()
                self.generator_thread.wait(3000)  # –ß–µ–∫–∞—î–º–æ –¥–æ 3 —Å–µ–∫—É–Ω–¥
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è–º"""
    import multiprocessing

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–æ—Ä–Ω–æ—Å—Ç—ñ
    multiprocessing.freeze_support()
    if hasattr(multiprocessing, 'set_start_method'):
        try:
            multiprocessing.set_start_method('spawn', force=True)
        except RuntimeError:
            pass

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    app = QApplication(sys.argv)
    app.setStyle('Fusion')  # –°—É—á–∞—Å–Ω–∏–π —Å—Ç–∏–ª—å

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ (—è–∫—â–æ —î)
    try:
        app.setWindowIcon(QIcon('icon.ico'))
    except:
        pass

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à—Ä–∏—Ñ—Ç—ñ–≤
    font = QFont("Segoe UI", 10)
    app.setFont(font)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞
    window = App()
    window.show()

    # –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()